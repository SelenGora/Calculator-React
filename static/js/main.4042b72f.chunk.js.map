{"version":3,"sources":["Components/Calculator.jsx","Components/ResultScreen.jsx","Components/ComputationScreen.jsx","Components/Screen.jsx","Components/KeypadRow.jsx","Components/ButtonItem.jsx","Components/Keypad.jsx","App.js","serviceWorker.js","index.js"],"names":["Calculator","state","computation","result","onButtonPress","event","_this","pressedButton","target","innerHTML","clear","indexOf","evalResult","eval","Number","isInteger","toFixed","setState","error","alert","trim","substr","length","this","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","_Screen__WEBPACK_IMPORTED_MODULE_6__","_Keypad__WEBPACK_IMPORTED_MODULE_7__","React","Component","ResultScreen","props","react_default","children","ComputationScreen","Screen","Components_ResultScreen","Components_ComputationScreen","KeypadRow","ButtonItem","classes","type","push","join","onClick","keypad","Components_KeypadRow","Components_ButtonItem","App","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4042b72f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport Screen from './Screen'\r\nimport Keypad from './Keypad'\r\n\r\n\r\nclass Calculator extends React.Component {\r\n\t\tstate = {\r\n\t\t\tcomputation : '',\r\n\t\t\tresult : 1\r\n\t\t}\r\n\r\n\t\t/*eslint no-eval: 0*/\r\n\t\tonButtonPress = event  => {\r\n\t\t\tlet computation = this.state.computation;\r\n\t\t\tconst pressedButton = event.target.innerHTML;\r\n\t\t\t\r\n\t\t\tif (pressedButton === 'CE') return this.clear();\r\n\t\t\telse if ((pressedButton >= '0' && pressedButton <= '9') || pressedButton === '.') computation += pressedButton;\r\n\t\t\telse if (['+', '-', '*', '/', '%'].indexOf(pressedButton) !== -1) computation += ' ' + pressedButton + ' ';\r\n\t\t\telse if (pressedButton === '=') {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst evalResult = eval(computation);\r\n\t\t\t\t\tconst result = Number.isInteger(evalResult)? evalResult : evalResult.toFixed(2);\r\n\t\t\t\t\tthis.setState({result});\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\talert('Invalid Operation');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcomputation = computation.trim();\r\n\t\t\t\tcomputation = computation.substr(0, computation.length - 1);\r\n\t\t\t}\r\n\t\t\tthis.setState({computation: computation});\r\n\r\n\t\t}\r\n\r\n\t\tclear() {\r\n\t\t\tthis.setState({computation: '', result: 0});\r\n\t\t}\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"calculator\">\r\n            <Screen computation={this.state.computation} result={this.state.result} />\r\n            <Keypad onButtonPress={this.onButtonPress} />\r\n        </div>\r\n        );\r\n    }\r\n}\r\nexport default Calculator","import React from 'react'\r\n\r\nconst ResultScreen = (props) => <div className=\"calculator__display-screen\">{props.children}</div>\r\n\r\nexport default ResultScreen","import React from 'react'\r\n\r\nconst ComputationScreen = (props) => <div className=\"calculator__computation-screen\">{props.children}</div>\r\n\r\nexport default ComputationScreen","import React from 'react'\r\n\r\nimport ResultScreen from './ResultScreen'\r\nimport ComputationScreen from './ComputationScreen'\r\n\r\nconst Screen = (props) => \r\n<div className=\"calculator__display\">\r\n    <ResultScreen>{props.result}</ResultScreen>\r\n    <ComputationScreen>{props.computation}</ComputationScreen>\r\n</div>\r\n\r\nexport default Screen","import React from 'react'\r\nconst KeypadRow = (props) => <div className=\"calculator__row\">{props.children}</div>\r\nexport default KeypadRow","import React from 'react'\r\nconst ButtonItem = (props) => {\r\n    const classes = ['calculator__keypad'];\r\n    if (typeof props !== 'undefined' && typeof props.type !== 'undefined')\r\n    classes.push(props.type);\r\n    return(\r\n        <button className={classes.join(' ')} onClick={props.onButtonPress}>\r\n            {props.children}\r\n        </button>\r\n    )\r\n}\r\n\r\n\r\nexport default ButtonItem","import React from 'react'\r\n\r\nimport KeypadRow from './KeypadRow'\r\nimport ButtonItem from './ButtonItem'\r\n\r\nconst keypad = (props) =>\r\n<div className=\"calculator__computation\">\r\n    <KeypadRow>\r\n        <ButtonItem type=\"operator\" onButtonPress={props.onButtonPress}>CE</ButtonItem>\r\n        <ButtonItem type=\"operator\" onButtonPress={props.onButtonPress}>&larr;</ButtonItem>\r\n        <ButtonItem type=\"operator\" onButtonPress={props.onButtonPress}>%</ButtonItem>\r\n        <ButtonItem type=\"operator\" onButtonPress={props.onButtonPress}>/</ButtonItem>\r\n    </KeypadRow>\r\n    <KeypadRow>\r\n        <ButtonItem onButtonPress={props.onButtonPress}>1</ButtonItem>\r\n        <ButtonItem onButtonPress={props.onButtonPress}>2</ButtonItem>\r\n        <ButtonItem onButtonPress={props.onButtonPress}>3</ButtonItem>\r\n        <ButtonItem type=\"operator\" onButtonPress={props.onButtonPress}>*</ButtonItem>\r\n    </KeypadRow>\r\n    <KeypadRow>\r\n        <ButtonItem onButtonPress={props.onButtonPress}>4</ButtonItem>\r\n        <ButtonItem onButtonPress={props.onButtonPress}>5</ButtonItem>\r\n        <ButtonItem onButtonPress={props.onButtonPress}>6</ButtonItem>\r\n        <ButtonItem type=\"operator\" onButtonPress={props.onButtonPress}>-</ButtonItem>\r\n    </KeypadRow>\r\n    <KeypadRow>\r\n        <ButtonItem onButtonPress={props.onButtonPress}>7</ButtonItem>\r\n        <ButtonItem onButtonPress={props.onButtonPress}>8</ButtonItem>\r\n        <ButtonItem onButtonPress={props.onButtonPress}>9</ButtonItem>\r\n        <ButtonItem type=\"operator\" onButtonPress={props.onButtonPress}>+</ButtonItem>\r\n    </KeypadRow>\r\n    <KeypadRow>\r\n        <ButtonItem onButtonPress={props.onButtonPress}>.</ButtonItem>\r\n        <ButtonItem onButtonPress={props.onButtonPress}>0</ButtonItem>\r\n        <ButtonItem type=\"large operator\" onButtonPress={props.onButtonPress}>=</ButtonItem>\r\n    </KeypadRow>\r\n</div>\r\n\r\nexport default keypad","import React from 'react'\nimport './App.css'\nimport Calculator from './Components/Calculator'\n\nconst App = () => (\n  <div className=\"App\">\n    <Calculator />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}